#!/usr/bin/env ruby
require 'set'
require 'io/console'
require 'tmpdir'

require_relative 'lib/options'
require_relative 'lib/matchers'
require_relative 'lib/git_diff_regexes'
require_relative 'lib/lang_filenames'
require_relative 'lib/string_colors'

@options = Options.parse!

def prompt_for_char
  char = STDIN.getch
  if char == "\u0003"
    puts '^C'
    exit(1)
  end
  puts char
  char
end

def find_matchers_for_lang(lang)
  MATCHERS.each do |_, matchers|
    # Case insensitive compare on language name
    next unless lang.casecmp(matchers[:lang]).zero?
    return matchers
  end
  nil
end

def find_matchers_for_lang_option
  return nil unless @options[:lang]
  matchers = find_matchers_for_lang(@options[:lang])
  if matchers.nil?
    raise %(
      We do not have a built-in regex for the "#{@options[:lang]}" language.
      Please feel free to add one and submit a PR.
    )
  end
  matchers
end

def find_matchers_for_regex_option
  return nil unless @options[:regex]
  {
    matchers: [{
      regex: Regexp.new(@options[:regex])
    }]
  }
end

def matchers_for_options
  find_matchers_for_regex_option || find_matchers_for_lang_option
end

# Find the regex for the given file
def find_matchers_for_filename(filename)
  MATCHERS.each do |file_regex, matchers|
    next unless filename[file_regex]
    return matchers
  end

  lang = LANG_FILENAMES[filename]
  return if lang.nil?
  find_matchers_for_lang(lang)
end

def find_filename_from_diff(line)
  match = line.match(FILENAME_REGEX)
  return false unless match
  match[:filename]
end

def find_line_number_from_diff(line)
  # Find the line number
  match = line.match(LINE_NUMBER_REGEX)
  return false unless match
  match[:b_line].to_i
end

def print_deleted_line(filename, line_number, line)
  puts "#{filename}:#{line_number}".yellow
  puts "+#{line}".green
  puts
end

def delete_all_lines(lines_to_delete)
  # Create a temp directory for backup files
  Dir::Tmpname.create('git-remove-debug') do |temp_dir|
    lines_to_delete.each do |filename, deleted_lines|
      temp_path = File.join(temp_dir, filename)
      FileUtils.mkdir_p File.dirname(temp_path)
      FileUtils.cp(filename, temp_path)

      puts "Backed up original #{filename} to: #{temp_path}"

      # Rewrite the file without deleted lines.
      deleted_line_numbers = Set.new(deleted_lines.map { |line| line[:number] })

      original_lines = File.read(filename).split("\n")
      File.open(filename, 'w') do |f|
        original_lines.each_with_index do |line, i|
          f.puts line unless deleted_line_numbers.include?(i + 1)
        end
      end
    end
  end
end

def total_deleted_lines(lines_to_delete)
  lines_to_delete.keys.reduce(0) do |s, key|
    s + lines_to_delete[key].count
  end
end

def final_confirm_deletion(lines_to_delete)
  total_lines = total_deleted_lines(lines_to_delete)
  puts "\n\n" if @options[:patch]
  puts '================================================================'
  puts "    Deleting #{total_lines} debugging statements in \
#{lines_to_delete.count} file(s):"
  puts "================================================================\n\n"

  lines_to_delete.each do |filename, lines|
    lines.each do |line_data|
      print_deleted_line(filename, line_data[:number], line_data[:line])
    end
  end

  print 'Delete all lines? [y,n]? '.blue
  if prompt_for_char == 'y'
    delete_all_lines(lines_to_delete)
    return
  end

  puts 'Aborted.'
end

def prompt_for_line_action(line)
  print 'Delete this line [y,n,d,q]? '.blue
  char = prompt_for_char

  case char.downcase
  when 'y'
    :delete_line
  when 'q' then exit
  when 'd'
    :skip_to_end
  when 'n'
    puts "Skipping #{@filename}:#{@line_number}"
  else
    # Invalid response, so ask again.
    confirm_line_deletion(line)
  end
end

def run_patch_prompt(filename, line_number, line)
  print_deleted_line(filename, line_number, line)
  prompt_for_line_action(line)
end

def action_for_line(filename, line_number, line, matchers)
  return nil unless matchers[:matchers].find { |m| m[:regex] =~ line }
  return run_patch_prompt(filename, line_number, line) if @options[:patch]
  :delete_line
end

def text_file?(filename)
  mime_type_flag = /darwin/ =~ RUBY_PLATFORM ? '-I' : '-i'
  mime_type = `file #{mime_type_flag} #{filename}`
  !(%r{text\/plain} =~ mime_type).nil?
end

def find_lines_to_delete_in_files(files)
  matchers = matchers_for_options
  override_matchers = !matchers.nil?

  lines_to_delete = {}

  files.each do |filename|
    # Only parse text files
    next unless text_file?(filename)

    matchers = find_matchers_for_filename(filename) unless override_matchers

    # Skip this file if we don't know what to look for
    next if matchers.nil?

    File.read(filename).lines.each_with_index do |line, i|
      line_number = i + 1

      action = action_for_line(filename, line_number, line, matchers)

      case action
      when :skip_to_end
        return lines_to_delete
      when :delete_line
        lines_to_delete[filename] ||= []
        lines_to_delete[filename] << {
          number: line_number,
          line: line
        }
      end
    end
  end
  lines_to_delete
end

def find_lines_to_delete_in_git_ls_files
  args = ARGV.join(' ')
  git_ls_files = `git ls-files #{args}`.split("\n")
  find_lines_to_delete_in_files(git_ls_files)
end

def find_lines_to_delete_in_git_diff
  args = ARGV.join(' ')
  git_diff = `git diff --unified=0 #{args}`.split("\n")

  filename = nil
  line_number = nil

  matchers = matchers_for_options
  override_matchers = !matchers.nil?

  lines_to_delete = {}

  git_diff.each do |line|
    next_filename = find_filename_from_diff(line)
    if next_filename
      filename = next_filename
      matchers = find_matchers_for_filename(filename) unless override_matchers
      line_number = nil
      next
    end

    # Skip the whole file when we don't have any matchers
    next if matchers.nil?

    next_line_number = find_line_number_from_diff(line)
    if next_line_number
      line_number = next_line_number
      next
    end

    # Keep going until the line number has been set.
    next if line_number.nil?

    next unless ADDED_LINE_REGEX =~ line
    stripped_line = line.sub(ADDED_LINE_REGEX, '')

    action = action_for_line(filename, line_number, stripped_line, matchers)

    case action
    when :skip_to_end
      return lines_to_delete
    when :delete_line
      lines_to_delete[filename] ||= []
      lines_to_delete[filename] << {
        number: line_number,
        line: stripped_line
      }
    end

    # Increment the line number for the next loop.
    line_number += 1
  end

  # Also look at all untracked files, and merge the results.
  untracked_files = `git ls-files --others --exclude-standard #{args}`.split("\n")
  find_lines_to_delete_in_files(untracked_files).merge lines_to_delete
end


lines_to_delete = if @options[:all]
  find_lines_to_delete_in_git_ls_files
else
  find_lines_to_delete_in_git_diff
end


total_lines = total_deleted_lines(lines_to_delete)
if total_lines.zero?
  puts 'Nothing to delete.'
  exit
end

if @options[:confirm] && !@options[:patch]
  final_confirm_deletion(lines_to_delete)
  exit
end

puts "Deleting #{total_lines} debugging statements in #{lines_to_delete.count} file(s)..."
delete_all_lines(lines_to_delete)
